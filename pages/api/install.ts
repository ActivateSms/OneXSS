import type { NextRequest } from "next/server";
import {passwordHash } from "../../common/auth"
import { Buffer } from 'buffer';

export const config = { runtime: "edge" };

// 数据库初始化
async function DBInitial(username: string, password: string, useremail: string, domain:string, module_import:boolean) {
    let db_init_sql = `DROP TABLE IF EXISTS invites;
    DROP TABLE IF EXISTS accesslog;
    DROP TABLE IF EXISTS project_modules;
    DROP TABLE IF EXISTS projects;
    DROP TABLE IF EXISTS modules;
    DROP TABLE IF EXISTS users;
    DROP TABLE IF EXISTS config;
    CREATE TABLE users (userid INTEGER AUTO_INCREMENT PRIMARY KEY UNIQUE NOT NULL,username TEXT UNIQUE,password TEXT,useremail TEXT,usertype INTEGER DEFAULT 0,enabled INTEGER DEFAULT 1);
    CREATE TABLE invites(invitecode TEXT PRIMARY KEY UNIQUE NOT NULL,is_used INTEGER DEFAULT 0,create_userid INTEGER,signup_userid INTEGER,FOREIGN KEY (create_userid) REFERENCES users(userid) ON DELETE CASCADE,FOREIGN KEY (signup_userid) REFERENCES users(userid) ON DELETE CASCADE);
    CREATE TABLE modules (moduleid INTEGER AUTO_INCREMENT PRIMARY KEY UNIQUE NOT NULL,modulename TEXT,moduledescription TEXT,moduletype INTEGER DEFAULT 0,modulecontent TEXT,module_extra_enable INTEGER DEFAULT 0,module_extra_argname TEXT UNIQUE,module_extra_column_name TEXT,module_extra_func_name TEXT UNIQUE,userid INTEGER,FOREIGN KEY (userid) REFERENCES users(userid) ON DELETE SET NULL);
    CREATE TABLE projects(projectid INTEGER AUTO_INCREMENT PRIMARY KEY UNIQUE NOT NULL,projectname TEXT,projectdescription TEXT,projectcode TEXT,projecturl CHAR(4) UNIQUE NOT NULL,obfuscate_enable INTEGER DEFAULT 0,obfuscate_code TEXT,telegram_notice_enable INTEGER DEFAULT 0,telegram_notice_token TEXT DEFAULT NULL,telegram_notice_chatid TEXT DEFAULT NULL,enabled INTEGER DEFAULT 1,userid INTEGER,FOREIGN KEY (userid) REFERENCES users(userid) ON DELETE CASCADE);
    CREATE TABLE project_modules (projectid INTEGER,moduleid INTEGER,FOREIGN KEY (projectid) REFERENCES projects(projectid) ON DELETE CASCADE,FOREIGN KEY (moduleid) REFERENCES modules(moduleid) ON DELETE CASCADE);
    CREATE TABLE accesslog (id TEXT PRIMARY KEY UNIQUE NOT NULL,projecturl CHAR(4) NOT NULL,country TEXT,region TEXT,city TEXT,isp TEXT,latitude NUMBER,longitude NUMBER,referer TEXT,domain TEXT,ip TEXT,useragent TEXT,requestdate INTEGER,otherdata TEXT,FOREIGN KEY (projecturl) REFERENCES projects(projecturl) ON DELETE CASCADE);
    CREATE TABLE config(configname TEXT PRIMARY KEY UNIQUE NOT NULL,configvalue TEXT NOT NULL);
    INSERT INTO users (userid,username,password,useremail,usertype,enabled) VALUES(1,'${username}','${password}','${useremail}',1,1);
    INSERT INTO config (configname, configvalue) VALUES ('domain', '${domain}'),('installed', 'installed');
    `;
    if (module_import){
        const module_import_b64_data = "";
        db_init_sql += Buffer.from(module_import_b64_data, 'base64').toString("utf-8");
        db_init_sql += '\n';
    }
    try {
        const status = await process.env.DB.exec(db_init_sql).then((insert_result: any) => {
            if (insert_result.count >1) {
                return 1;
            } else {
                return -1;
            }
        });
        if (status != -1) {
            return true;
        } else {
            return false;
        }
    } catch (error) {
        return false;
    }
}


async function checkKVStatus() {
    try {
        await process.env.JSKV.put("test", "123456");
        if ("123456" == await process.env.JSKV.get("test")) {
            return true;
        }
        return false;
    }
    catch (error) {
        return false;
    }
}
async function checkDBStatus() {
    try {
        let db_result = await process.env.DB
            .prepare("SELECT 123456 AS test")
            .first().then((query_result: any) => {
                return query_result.test;
            });
        if (db_result == 123456) {
            return true;
        }
        return false;
    }
    catch (error) {
        return false;
    }
}
async function checkInstall() {
    let installStatus = false;
    try {
        let installed = await process.env.DB.prepare("SELECT configvalue FROM config WHERE configname = 'installed'")
            .first().then((query_result: any) => {
                return query_result.configvalue;
            });
        if (installed == 'installed') {
            installStatus = true;
        }
    } catch (error) {
        installStatus = false;
    }
    return installStatus;
}
function checkTokenSalt() {
    if (process.env.TOKEN_SALT != undefined && process.env.TOKEN_SALT.length >= 8) {
        return true;
    }
    return false;
}
function checkPasswordSalt() {
    if (process.env.PASSWORD_SALT != undefined && process.env.PASSWORD_SALT.length >= 8) {
        return true;
    }
    return false;
}

export async function handle(req: NextRequest) {
    const domainRegex = /^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,63}(\/\S*)?$/;
    const usernameRegex = /^[a-zA-Z0-9]+$/;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    let error_message = [];
    let check_status = true;
    try {
        if(await checkInstall()){
            return new Response(
                JSON.stringify({
                    code: 400,
                    message: "系统已安装"
                }),
                {
                    status: 400,
                }
            );
        }
        if(!checkTokenSalt()){
            check_status = false;
            error_message.push("Token环境变量检测失败");
        }
        if(!checkPasswordSalt()){
            check_status = false;
            error_message.push("Password环境变量检测失败");
        }
        if(!(checkDBStatus())){
            check_status = false;
            error_message.push("DB绑定检测失败");
        }
        if(!(await checkKVStatus())){
            check_status = false;
            error_message.push("KV绑定检测失败");
        }
        const jsonData = await req.json();
        const domain = jsonData.domain;
        const module_import = jsonData.module_import;
        const username = jsonData.username;
        const password = await passwordHash(jsonData.password);
        const useremail = jsonData.useremail;
        if (!domain || typeof domain !== 'string' || !domain.match(domainRegex)) {
            check_status = false;
            error_message.push("请输入域名");
        }

        if (typeof module_import !== 'boolean') {
            check_status = false;
            error_message.push("导入推荐模块参数无效");
        }

        if (!username || typeof username !== 'string' || username.trim() === '') {
            check_status = false;
            error_message.push("请输入有效的用户名");
        }

        if (!password || typeof password !== 'string' || password.trim() === '') {
            check_status = false;
            error_message.push("请输入有效的密码");
        }
        if (!username.match(usernameRegex)) {
            check_status = false;
            error_message.push("用户名只能包含字母和数字");
        }
        if (password.length < 8) {
            check_status = false;
            error_message.push("密码长度错误");
        }
        if (!useremail.match(emailRegex)) {
            check_status = false;
            error_message.push("请输入有效的邮箱地址");
        }
        // 验证参数是否正确
        if (!check_status) {
            return new Response(
                JSON.stringify({
                    code: 400,
                    message: error_message.join(", ")
                }),
                {
                    status: 400,
                }
            );
        };


        if (await DBInitial(username, password, useremail,domain,module_import) == false) {
            return new Response(
                JSON.stringify({
                    code: 500,
                    message: "数据库初始化错误,请检查日志"
                }),
                {
                    status: 500,
                }
            );
        };

        // 无错误,进行完毕.
        return new Response(
            JSON.stringify({
                code: 200,
                message: "安装成功"
            }),
            {
                status: 200,
            }
        );
    }
    // 处理错误
    catch (e: any) {

        return new Response(
            JSON.stringify({
                code: 500,
                message: "服务器内部错误" + e.message
            }),
            {
                status: 500,
            }
        );
    }
}

export default handle;